from create_bot import bot
from aiogram.dispatcher import FSMContext
from states.states_group import GameState
from quiz_database.db_funcs import get_user, get_quiz_questions, save_results
from keyboards.quiz_keyboards import lets_play_keyboard, stop_game_keyboard


async def start_quiz(quiz_id: int, tg_id: int, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id

    :param quiz_id: id –∫–≤–∏–∑–∞
    :type quiz_id: int
    :param tg_id: telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type tg_id: int
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    user = await get_user(tg_id)
    user_id = user.id
    questions = await get_quiz_questions(quiz_id)

    async with state.proxy() as data:
        data['quiz'] = quiz_id
        data['user'] = user_id
        data['questions'] = questions
        data['cur_question'] = 0
        data['answers'] = {}
        data['scores'] = 0


async def next_poll(tg_id: int, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    :param tg_id: telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type tg_id: int
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    async with state.proxy() as data:
        questions = data.get('questions')
        curr_question = data.get('cur_question')
    try:
        question = questions[curr_question]
        cur_poll = await bot.send_poll(chat_id=tg_id,
                                       question=question.question,
                                       options=question.options,
                                       correct_option_id=question.correct_answer,
                                       explanation=question.explanation,
                                       is_anonymous=False,
                                       type='quiz'
                                       )
        stop_message = await bot.send_message(tg_id, '–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚òü',
                                              reply_markup=await stop_game_keyboard())
        async with state.proxy() as data:
            data['next_question'] = question
            data['cur_question'] += 1
            data['stop_message_id'] = stop_message.message_id
            data['poll_id'] = cur_poll.poll.id
    except IndexError:
        await finish_quiz(tg_id, state)


async def save_answer(option_ids: list, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç

    :param option_ids: —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type option_ids: list
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    async with state.proxy() as data:
        question = data.get('next_question')
        answer_id = option_ids[0]
        data['answers'][question.id] = answer_id
        if question.correct_answer == answer_id:
            data['scores'] += 1


async def finish_quiz(tg_id: int, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    :param tg_id: telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type tg_id: int
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """
    async with state.proxy() as data:
        quiz_id = data.get('quiz')
        user_id = data.get('user')
        answers = data.get('answers')
        scores = data.get('scores')
        q_num = data.get('cur_question')

    await save_results(quiz_id, user_id, answers, scores)
    await bot.send_message(tg_id, f"üéâ<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>\n"
                                  f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ <b>{scores} –∏–∑ {q_num}</b> –≤–æ–ø—Ä–æ—Å–æ–≤",
                           parse_mode="HTML")
    await GameState.invitation.set()
    await bot.send_message(tg_id, "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?",
                           reply_markup=await lets_play_keyboard(),
                           parse_mode="HTML")
