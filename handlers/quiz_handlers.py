from aiogram import types
from aiogram.dispatcher import FSMContext
from time import sleep
from config import bot_logger
from create_bot import bot, dp
from states.states_group import GameState
from quiz_database.db_funcs import create_user_if_not_exist
from keyboards.quiz_keyboards import lets_play_keyboard, choose_quiz_keyboard
from utils.quiz_functions import start_quiz, next_poll, save_answer


@dp.message_handler(commands=["start"], state=None)
async def start_handler(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º —Ä–∞–Ω—å—à–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–≤–∏–∑.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :return: None
    """

    tg_id = message.from_user.id
    tg_username = message.from_user.username
    await create_user_if_not_exist(tg_id, tg_username)

    await bot.send_message(tg_id, "üëã<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Öüî¨\n"
                                  "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å? üéÆ",
                           reply_markup=await lets_play_keyboard(),
                           parse_mode="HTML")


@dp.message_handler(commands=["help"], state=None)
async def help_handler(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ help. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :return: None
    """

    tg_id = message.from_user.id
    await bot.send_message(tg_id, "üëã<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–Ø –∫–≤–∏–∑-–±–æ—Ç. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>start</b>\n"
                                  "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å? üéÆ",
                           parse_mode="HTML")


@dp.callback_query_handler(state=None)
async def lets_play_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –∏–≥—Ä—É".

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    await callback.answer()
    tg_id = callback.from_user.id

    if callback.data == '-1':
        await bot.send_message(tg_id, "üòî–û—á–µ–Ω—å –∂–∞–ª—å!\n –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ <b>/start</b>",
                               parse_mode="HTML")
    elif callback.data == '0':
        await GameState.quiz.set()
        await bot.send_message(tg_id, "üé≤–í—ã–±–µ—Ä–∏ –∫–≤–∏–∑, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å:",
                               reply_markup=await choose_quiz_keyboard())
    else:
        await GameState.quiz.set()
        try:
            quiz_id = int(callback.data)
            await start_quiz(quiz_id, tg_id, state)
            await next_poll(tg_id, state)
        except ValueError as exc:
            bot_logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–≤–∏–∑–∞: {exc}')


@dp.poll_answer_handler()
async def answer_handler(quiz_answer: types.PollAnswer) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞

    :param quiz_answer: –æ–±—ä–µ–∫—Ç PollAnswer —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å—É—é—â–µ–º
    :type quiz_answer: types.PollAnswer
    :return None
    """

    tg_id = quiz_answer.user.id
    option_ids = quiz_answer.option_ids
    state = dp.get_current().current_state()

    await save_answer(option_ids, state)
    sleep(0.1)
    await next_poll(tg_id, state)
