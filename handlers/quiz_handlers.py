from aiogram import types
from aiogram.dispatcher import FSMContext
from asyncio import sleep
from config import bot_logger
from create_bot import bot, dp
from states.states_group import GameState
from quiz_database.db_funcs import create_user_if_not_exist
from keyboards.quiz_keyboards import lets_play_keyboard, choose_quiz_keyboard
from utils.quiz_functions import start_quiz, next_poll, save_answer
from utils.custom_filters import PollStateFilter


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º —Ä–∞–Ω—å—à–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–≤–∏–∑.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :return: None
    """

    tg_id = message.from_user.id
    tg_username = message.from_user.username
    await create_user_if_not_exist(tg_id, tg_username)
    await GameState.invitation.set()
    await bot.send_message(tg_id, "üëã<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Öüî¨\n"
                                  "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å? üéÆ",
                           reply_markup=await lets_play_keyboard(),
                           parse_mode="HTML")


@dp.message_handler(commands=["help"])
async def help_handler(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ help. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :return: None
    """

    tg_id = message.from_user.id
    await bot.send_message(tg_id, "üëã<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–Ø –∫–≤–∏–∑-–±–æ—Ç. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/start</b>\n"
                                  "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å? üéÆ",
                           parse_mode="HTML")


@dp.callback_query_handler(lambda callback: callback.data == 'start_new_game', state=GameState.invitation)
async def choose_quiz_handler(callback: types.CallbackQuery) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä, –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –∫–≤–∏–∑–∞ –¥–ª—è –∏–≥—Ä—ã".

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :return: None
    """

    tg_id = callback.from_user.id
    await callback.answer()
    await GameState.choose_quiz.set()
    await bot.send_message(tg_id, "üé≤–í—ã–±–µ—Ä–∏ –∫–≤–∏–∑, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å:",
                           reply_markup=await choose_quiz_keyboard())


@dp.callback_query_handler(lambda callback: callback.data == 'cancel_game',
                           state=[GameState.invitation, GameState.challenged])
async def cancel_game_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä, –æ—Ç–º–µ–Ω—è—é—â–∏–π –∏–≥—Ä—É".

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    tg_id = callback.from_user.id
    await callback.answer()
    await state.finish()
    await bot.send_message(tg_id, "üòî–û—á–µ–Ω—å –∂–∞–ª—å!\n –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ <b>/start</b>",
                           parse_mode="HTML")


@dp.callback_query_handler(lambda callback: callback.data.isdigit(),
                           state=[GameState.choose_quiz, GameState.challenged])
async def launch_quiz_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∫–≤–∏–∑".

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    tg_id = callback.from_user.id
    await callback.answer()
    try:
        quiz_id = int(callback.data)
        await GameState.quiz_in_progress.set()
        await start_quiz(quiz_id, tg_id, state)
        await next_poll(tg_id, state)
    except ValueError as exc:
        bot_logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–≤–∏–∑–∞: {exc}')
        await state.finish()


@dp.poll_answer_handler(PollStateFilter())
async def answer_handler(poll_answer: types.PollAnswer) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞

    :param poll_answer: –æ–±—ä–µ–∫—Ç PollAnswer —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å—É—é—â–µ–º
    :type poll_answer: types.PollAnswer
    :return None
    """

    tg_id = poll_answer.user.id
    option_ids = poll_answer.option_ids
    state = dp.get_current().current_state()

    async with state.proxy() as data:
        stop_message_id = data.get('stop_message_id')

    await save_answer(option_ids, state)
    await sleep(0.1)
    await bot.delete_message(tg_id, stop_message_id)
    await next_poll(tg_id, state)


@dp.callback_query_handler(lambda callback: callback.data == 'stop_game',
                           state=GameState.quiz_in_progress)
async def stop_game_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –∫–≤–∏–∑.

    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery
    :type callback: types.CallbackQuery
    :param state: —Å—Ç—ç–π—Ç
    :type: FSMContext
    :return: None
    """

    tg_id = callback.from_user.id
    await callback.answer()
    await state.finish()
    await bot.send_message(tg_id, "üõë–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!\n"
                                  "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ <b>/start</b>",
                           parse_mode='HTML')


@dp.message_handler(state=GameState.quiz_in_progress)
async def you_are_in_game_handler(message: types.Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –≤ –∏–≥—Ä–µ, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∫–≤–∏–∑–∞.

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :type message: types.Message
    :return: None
    """

    tg_id = message.from_user.id
    await bot.send_message(tg_id, "üéÆ–¢—ã –µ—â—ë –≤ –∏–≥—Ä–µ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–∏–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É‚òùÔ∏è")
